{"version":3,"sources":["components/Stack.jsx","components/App.jsx","App.js","serviceWorker.js","index.js"],"names":["Stack","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","getNewVacations","thrownCards","state","console","log","map","thrownCard","id","workId","axios","post","query","then","response","setState","stack","data","recommendedJobs","error","onThrowout","e","stackCopy","toConsumableArray","index","vacancy","indexOf","target","splice","prevState","concat","direction","throwDirection","length","_this$state","react_default","a","createElement","className","role","aria-label","react_swing_default","throwout","config","throwOutConfidence","xOffset","yOffset","element","xConfidence","Math","min","abs","offsetWidth","yConfidence","offsetHeight","max","key","headline","companyName","card","toString","slice","Component","App","Stack_Stack","react_router_dom","basename","process","react_router","path","exact","component","AppComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f686af17.chunk.js","sourcesContent":["import React, { Component } from 'react';\n/* eslint-disable import/no-extraneous-dependencies */\n// import PropTypes from 'prop-types';\nimport Swing from 'react-swing';\nimport axios from 'axios';\n\nimport { vacancies } from '../resources/mockedData';\n// import Card from './Card';\nconst THROW_SENSITIVITY = 0.7;\n\nexport default class Stack extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stack: [],\n      thrownCards: [],\n    };\n  }\n\n  componentDidMount = () => {\n    this.getNewVacations();\n  }\n\n  getNewVacations = () => {\n    /* {\n    recommendedJobs(ratings: [{jobId: \"sfa\", rating: THUMBS_DOWN},\n     {jobId: \"sfa\", rating: THUMBS_DOWN}]) {\n    workId\n    headline\n    companyName\n    }\n  } */\n    const { thrownCards } = this.state;\n\n    console.log(thrownCards.map(thrownCard => ({ id: thrownCard.workId })));\n\n    const query = '{ recommendedJobs(ratings: []) { workId headline companyName}}';\n    axios.post('https://unsettler.azurewebsites.net/graphql', { query }).then((response) => {\n      this.setState({\n        stack: response.data.data.recommendedJobs,\n      });\n    }, (error) => {\n      console.error(error);\n    });\n  }\n\n  onThrowout = (e) => {\n    console.log(e);\n    const { stack } = this.state;\n    const stackCopy = [...stack];\n    const index = stackCopy.map(vacancy => vacancy.workId).indexOf(e.target.id);\n\n    if (index !== -1) {\n      stackCopy.splice(index, 1);\n      this.setState({ stack: stackCopy });\n\n      this.setState(prevState => ({\n        thrownCards: [...prevState.thrownCards,\n          { vacancy: stack[index], direction: e.throwDirection }],\n      }));\n    }\n\n    if (stackCopy.length <= 0) {\n      this.getNewVacations();\n    }\n  }\n\n  render() {\n    const { stack, thrownCards } = this.state;\n    if (!stack.length) {\n      return <p> loading</p>;\n    }\n    return (\n      <div>\n        <div className=\"absolute f2 right-0 z-999 pt6 ph2\">\n          <span role=\"img\" aria-label=\"Thumbs up\">&#128077;</span>\n        </div>\n        <div className=\"absolute f2 red left-0 z-999 pt6 phh2\">\n          <span role=\"img\" aria-label=\"Thumbs down\">&#128078;</span>\n\n        </div>\n        {\n        stack.length && (\n        <Swing\n          className=\"relative center\"\n          throwout={this.onThrowout}\n          config={{\n            throwOutConfidence: (xOffset, yOffset, element) => {\n              const xConfidence = Math.min(Math.abs(xOffset) / element.offsetWidth\n                   + THROW_SENSITIVITY, 1);\n              const yConfidence = Math.min(Math.abs(yOffset) / element.offsetHeight\n                   + THROW_SENSITIVITY, 1);\n\n              return Math.max(xConfidence, yConfidence);\n            },\n          }}\n        >\n          {\n                stack.map(vacancy => (\n                  <div\n                    id={vacancy.workId}\n                    className=\"absolute w-100 ba bg-white pv6 ph4\"\n                    key={vacancy.workId}\n                  >\n                    <span className=\"db f3 sans-serif\">\n                      {vacancy.headline}\n                    </span>\n                    <span className=\"db f4 sans-serif\">\n                      {vacancy.companyName}\n                    </span>\n                  </div>\n                ))\n              }\n        </Swing>\n        )\n\n      }\n\n        <div className=\"absolute bottom-0\">\n          {\n            thrownCards.map(card => (\n              <div key={card.vacancy.workId}>\n                <span className=\"f5 sans-serif\">{card.vacancy.headline}</span>\n                <span className=\"f5 sans-serif\">\n                  {`  You Swiped ${card.direction.toString().slice(-6)}`}\n                </span>\n              </div>\n            ))\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nStack.propTypes = {\n};\n","import React, { Component } from 'react';\n\nimport Stack from './Stack';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"pa3 mt4 mw6 center\">\n        <Stack onThrowout={this.onThrowout} />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport AppComponent from './components/App'\n\nclass App extends Component {\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <Route path=\"/\" exact component={AppComponent}/>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}