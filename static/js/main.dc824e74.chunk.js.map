{"version":3,"sources":["resources/mockedData.js","components/Stack.jsx","components/App.jsx","App.js","serviceWorker.js","index.js"],"names":["vacancies","id","title","employer","municipality","Stack","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onThrowout","e","console","log","stack","state","stackCopy","toConsumableArray","index","map","vacancy","indexOf","target","splice","setState","prevState","thrownCards","concat","direction","throwDirection","_this$state","react_default","a","createElement","react_swing_default","className","throwout","config","throwOutConfidence","xOffset","yOffset","element","xConfidence","Math","min","abs","offsetWidth","yConfidence","offsetHeight","max","key","card","toString","slice","Component","App","Stack_Stack","react_router_dom","basename","process","react_router","path","exact","component","AppComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dc824e74.chunk.js","sourcesContent":["/* eslint-disable import/prefer-default-export */\nexport const vacancies = [\n  {\n    id: '293490234',\n    title: 'Systemutvecklare sökes',\n    employer: 'Arbetsförmedlingen',\n    municipality: 'Stockholm',\n  },\n  {\n    id: '912912389',\n    title: 'Kock till en restaurang',\n    employer: 'Arbetsförmedlingen',\n    municipality: 'Jönköping',\n  },\n  {\n    id: '9812389234',\n    title: 'Klippa gräs',\n    employer: 'Arbetsförmedlingen',\n    municipality: 'Jönköping',\n  },\n  {\n    id: '9812389444234',\n    title: 'Service-minded Fönsterputsare',\n    employer: 'Hack for Sweden',\n    municipality: 'Stockholm',\n  },\n  {\n    id: '98123893434444234',\n    title: 'Stresstålig abonnemangsförsäljare',\n    employer: 'Arbetsförmedlingen',\n    municipality: 'Luleå',\n  },\n];\n","import React, { Component } from 'react';\n/* eslint-disable import/no-extraneous-dependencies */\n// import PropTypes from 'prop-types';\nimport Swing from 'react-swing';\n\nimport { vacancies } from '../resources/mockedData';\n// import Card from './Card';\nconst THROW_SENSITIVITY = 0.7;\n\nexport default class Stack extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stack: vacancies,\n      thrownCards: [],\n    };\n  }\n\n  onThrowout = (e) => {\n    console.log(e);\n    const { stack } = this.state;\n    const stackCopy = [...stack];\n    const index = stackCopy.map(vacancy => vacancy.id).indexOf(e.target.id);\n\n    if (index !== -1) {\n      stackCopy.splice(index, 1);\n      this.setState({ stack: stackCopy });\n\n      this.setState(prevState => ({\n        thrownCards: [...prevState.thrownCards,\n          { vacancy: stack[index], direction: e.throwDirection }],\n      }));\n    }\n  }\n\n  render() {\n    const { stack, thrownCards } = this.state;\n    return (\n      <div>\n        <Swing\n          className=\"relative center\"\n          throwout={this.onThrowout}\n          config={{\n            throwOutConfidence: (xOffset, yOffset, element) => {\n              const xConfidence = Math.min(Math.abs(xOffset) / element.offsetWidth\n             + THROW_SENSITIVITY, 1);\n              const yConfidence = Math.min(Math.abs(yOffset) / element.offsetHeight\n             + THROW_SENSITIVITY, 1);\n\n              return Math.max(xConfidence, yConfidence);\n            },\n          }}\n        >\n          {\n          stack.map(vacancy => (\n            <div\n              id={vacancy.id}\n              className=\"absolute w-100 ba bg-white pv6 ph4\"\n              key={vacancy.id}\n            >\n              <span className=\"db f3 sans-serif\">\n                {vacancy.title}\n              </span>\n              <span className=\"db f4 sans-serif\">\n                {vacancy.employer}\n              </span>\n              <span className=\"db f4 dark-gray sans-serif\">\n                {vacancy.municipality}\n              </span>\n            </div>\n          ))\n        }\n        </Swing>\n        <div className=\"absolute bottom-0\">\n          {\n            thrownCards.map(card => (\n              <div key={card.vacancy.id}>\n                <span className=\"f5 sans-serif\">{card.vacancy.title}</span>\n                <span className=\"f5 sans-serif\">\n                  {`  You Swiped ${card.direction.toString().slice(-6)}`}\n                </span>\n              </div>\n            ))\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nStack.propTypes = {\n};\n","import React, { Component } from 'react';\n\nimport Stack from './Stack';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"pa3 mt4 mw6 center\">\n        <Stack onThrowout={this.onThrowout} />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport AppComponent from './components/App'\n\nclass App extends Component {\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <Route path=\"/\" exact component={AppComponent}/>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}